import paho.mqtt.client as mqtt
import threading
import time
import Queue
import json

BROKER_ADDRESS     = "argus.paris.inria.fr"

class Experiment(object):

    def __init__(self):

        self.dataLock           = threading.Lock()
        self.testbed_resp_dict  = {}
        self.testbed_handler = Testbed_Handler('mercator', self.testbed_resp_dict)
        while  not self.testbed_handler.is_connected:
            pass

        self.motes = self._populate_motes_list()

    def _populate_motes_list(self):
        # send status cmd to all
        token = self.testbed_handler.send_command('box', 'all', 'status', {})
        time.sleep(1)
        with self.dataLock:
            response    = self.testbed_resp_dict[token]
            del self.testbed_resp_dict[token]


class Testbed_Handler(object):

    def __init__(self, mqttclient_id, resp_dict):

        self.is_connected           = False
        self.resp_dict              = resp_dict
        self.mqttclient             = mqtt.Client(mqttclient_id)
        self.mqttclient.on_connect  = self._on_mqtt_connect
        self.mqttclient.on_message  = self._on_mqtt_message
        self.mqttclient.connect(BROKER_ADDRESS)
        self.mqttthread             = threading.Thread(
            name   = 'mqtt_loop_thread',
            target = self.mqttclient.loop_forever
        )
        self.mqttthread.start()

    #============================= private ========================================================

    def _on_mqtt_connect(self, client, userdata, flags, rc):
        client.subscribe('opentestbed/deviceType/#')
        self.is_connected    = True

    def _on_mqtt_message(self, client, userdata, message):
        not_desired_topics   = ['heartbeat', 'fromoteserialbytes', 'picturetoscreen','colortoscreen', 'hostnametoscreen']
        topic_splitted       = message.topic.split('/')
        if topic_splitted[6] not in not_desired_topics:
            payload     = json.loads(message.payload)
            if payload['token'] not in self.resp_dict:
                self.resp_dict[payload['token']]                = {}
            self.resp_dict[payload['token']][topic_splitted[4]] = payload

    #============================= public =================================

    def send_command(self, deviceType ,deviceId, cmd, args):
        args['token']   = '{0}_{1}'.format(cmd, time.time())
        self.mqttclient.publish(
            topic       = 'opentestbed/deviceType/{0}/deviceId/{1}/cmd/{2}'.format(deviceType, deviceId, cmd),
            payload     = json.dumps(args),
        )
        return args['token']

if __name__ == '__main__':
    mercator_experiment = Experiment()