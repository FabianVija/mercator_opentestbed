import struct
import Hdlc
import MercatorDefines

class MercatorHandler(object):

    def __init__(self):
        self.hdlc = Hdlc.Hdlc()

    def REQ_IDLE_message(self):
        message   = struct.pack('>B', MercatorDefines.TYPE_REQ_IDLE, )
        return self.hdlc.hdlcify(message)

    def REQ_ST_message(self):
        message    = struct.pack('>B', MercatorDefines.TYPE_REQ_ST, )
        return self.hdlc.hdlcify(message)

    def send_REQ_RX(self, channel_spacing, frequency_0, channel, srcmac, transctr, txpksize, txfillbyte):
        [m0, m1, m2, m3, m4, m5, m6, m7] = srcmac
        message    = struct.pack(  '>BHIHBBBBBBBBHBB',
                                   MercatorDefines.TYPE_REQ_RX,
                                   channel_spacing,
                                   frequency_0,
                                   channel,
                                   m0, m1, m2, m3, m4, m5, m6, m7,
                                   transctr,
                                   txpksize,
                                   txfillbyte,
                                   )
        return self.hdlc.hdlcify(message)

    def handle_inputbuf(self, input_buf):
        for a in range(0,3):
            del(input_buf[-1])
        del(input_buf[0])
        try:
            inputtype = input_buf[0]

            if   inputtype == MercatorDefines.TYPE_IND_TXDONE:
                # parse input
                [msg_type] = \
                    struct.unpack(">B", ''.join([chr(b) for b in input_buf]))

                notif      = {
                    'type':             msg_type,
                }
                return notif

            elif inputtype == MercatorDefines.TYPE_IND_RX:

                # parse input
                [msg_type, length, rssi, flags, pkctr] = \
                    struct.unpack(">BBbBH", ''.join([chr(b) for b in input_buf]))
                if flags & (1 << 7) != 0:
                    crc = 1
                else:
                    crc = 0

                if flags & (1 << 6) != 0:
                    expected = 1
                else:
                    expected = 0

                if crc == 0 or expected == 0:
                    pkctr = 0

                notif      = {
                    'type':             msg_type,
                    'length':           length,
                    'rssi':             rssi,
                    'crc':              crc,
                    'expected':         expected,
                    'pkctr':            pkctr,
                }
                return notif

            elif inputtype == MercatorDefines.TYPE_RESP_ST:

                # parse input
                [msg_type, status, numnotifications, m1, m2, m3, m4, m5, m6, m7, m8] = \
                    struct.unpack(">BBHBBBBBBBB", ''.join([chr(b) for b in input_buf]))

                response = {
                    'type':             msg_type,
                    'status':           status,
                    'numnotifications': numnotifications,
                    'mac':              (m1, m2, m3, m4, m5, m6, m7, m8),
                }
                return response

            elif inputtype == MercatorDefines.TYPE_IND_UP:
                # parse input
                [msg_type] = \
                    struct.unpack(">B", ''.join([chr(b) for b in input_buf]))

                notif      = {
                    'type':             msg_type,
                    }
                return notif

            else:

                raise SystemError('unknown notification type {0}'.format(input_buf[0]))

        except Exception as err:
            return err
